{
  "Parameters": {
    "LocalStorage": {
      "Type": "string",
      "Description": "The root folder for packages"
    },
    "JREDownloadUrl": {
      "Type": "string",
      "DefaultValue": "http://javadl.oracle.com/webapps/download/AutoDL?BundleId=233172_512cd62ec5174c3487ac17c61aaa89e8",
      "Description": "Link to JRE 8u171"
    },
    "JREInstaller": {
      "Type": "string",
      "Description": "The path to the Java SE Runtime Environment installer.",
      "DefaultValue": "jre-8u171-windows-x64.exe"
    },
    "SolrPackage": {
      "Type": "string",
      "Description": "The path to the SOLR zip package.",
      "DefaultValue": "solr-6.6.2.zip"
    },
    "SolrDownloadUrl": {
      "Type": "string",
      "DefaultValue": "http://archive.apache.org/dist/lucene/solr/6.6.2/solr-6.6.2.zip"
    },
    "SolrVersion": {
      "Type": "string",
      "DefaultValue": "6.6.2",
      "Description": "What version of Solr should be downloaded for install"
    },
    "InstallFolder": {
      "Type": "string",
      "Description": "Where should Solr be installed to"
    },
    "SolrUseSSL": {
      "Type": "boolean",
      "DefaultValue": true,
      "Description": "Should Solr require HTTPS for access?"
    },
    "SolrHost": {
      "Type": "string",
      "Description": "What host name should the Solr service use"
    },
    "SolrPort": {
      "Type": "string",
      "DefaultValue": "8983",
      "Description": "The port the Solr service should use"
    },
    "SolrServiceName" : {
      "Type": "string"
    },
    "UseLocalFiles": {
      "Type": "boolean",
      "DefaultValue": true,
      "Description": "Should use local Solr and JRE files or download from Internet?"
    },
    "CertStoreLocation": {
      "Type": "String",
      "Description": "Specifies the path of the store from which certificates will be exported."
    },
    // Property and value are used to choose certificate from CertStoreLocation
    // By defaul FriendlyName is used to find certificate to export,
    // but you can specify other property available in certificate ex. Subject
    "Property": {
      "Type": "String",
      "DefaultValue": "FriendlyName"
    },
    "Value": {
      "Type": "String"
    },
    "CertPassword": {
      "Type": "String",
      "DefaultValue" :  "secret",
      "Description": "Specifies the password for the exported PFX file."
    },
    "CertificateName": {
      "Type": "string",
      "Description": "The name of the certificate to be created."
    },
    "CertPath": {
      "Type": "string",
      "Description": "The physical path on disk where certificates will be stored.",
      "DefaultValue": "c:\\certificates"
    },
    "RootCertFileName": {
      "Type": "string",
      "Description": "The file name of the root certificate to be created.",
      "DefaultValue": "SitecoreRootCert"
    }
  },
  "Modules": [
    "SitecoreInstallExtensions"
  ],

  "Variables": {
    
    "Source.JRE": "[joinpath(parameter('LocalStorage'), parameter('JREInstaller'))]",
    
    "Source.Solr": "[joinpath(parameter('LocalStorage'), parameter('SolrPackage'))]",

    "SolrFolder": "[concat('\\solr-', parameter('SolrVersion'))]",

    "SolrInstallFolder": "[joinpath(parameter('InstallFolder'), variable('SolrFolder'))]",
    
    "CertStoreFile": "[joinpath(variable('SolrInstallFolder'), '\\server\\etc\\solr-ssl.keystore.pfx')]",

    "SolrProtocol": "[if ( parameter('SolrUseSSL'), 'https', 'http')]",
    "SolrUrl": "[concat(variable('SolrProtocol'), '://', parameter('SolrHost'), ':', parameter('SolrPort'), '/solr/')]",

  
    "Root.Cert.DnsName": "[concat('DO_NOT_TRUST_', parameter('RootCertFileName'))]",
   
    "Root.Cert.Store": "cert:\\LocalMachine\\Root",
   
    "Client.Cert.Store": "cert:\\LocalMachine\\My"
  },

  "Tasks": {
    "CreatePaths": {
      // Create the physical disk path.
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[parameter('CertPath')]",
          "[parameter('LocalStorage')]"
        ]
      }
    },
    "CreateRootCert": {
      // Create the root certificate.
      "Type": "NewRootCertificate",
      "Params": {
        "Path": "[parameter('CertPath')]",
        "Name": "[parameter('RootCertFileName')]",
        "StoreLocation": "CurrentUser",
        "DnsName": "[variable('Root.Cert.DnsName')]"
      }
    },
    "ImportRootCertificate": {
      "Description" : "Import the root certificate.",
      "Type": "ImportCertificate",
      "Params": {
        "CertStoreLocation": "[variable('Root.Cert.Store')]",
        "FilePath": "[concat(joinpath(parameter('CertPath'), parameter('RootCertFileName')), '.crt')]"
      }
    },
    "CreateSignedCert": {
      // Create a certificate signed by the root authority.
      "Type": "NewSignedCertificate",
      "Params": {
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]",
        "Path": "[parameter('CertPath')]",
        "CertStoreLocation": "[variable('Client.Cert.Store')]",
        "Name": "[parameter('CertificateName')]",
        "DnsName": "[parameter('CertificateName')]"
      }
    },
    "DownloadJRE": {
      "Type": "DownloadFile",
      "Skip": "[parameter('UseLocalFiles')]",
      "Params": {
        "SourceUri": "[parameter('JREDownloadUrl')]",
        "DestinationPath": "[joinpath(parameter('LocalStorage'), parameter('JREInstaller'))]"
      }
    },
    "DownloadSolr": {
      "Type": "DownloadFile",
      "Skip": "[parameter('UseLocalFiles')]",
      "Params": {
        "SourceUri": "[parameter('SolrDownloadUrl')]",
        "DestinationPath": "[joinpath(parameter('LocalStorage'), parameter('SolrPackage'))]"
      }
    },
    "InstallJRE": {
      "Type": "EnsureJRE",
      "Params": {
        "JavaPackagePath": "[variable('Source.JRE')]"
      }
    },
    "InstallSolr": {
      "Type": "EnsureSolr",
      "Params": {
        "SolrPackage": "[variable('Source.Solr')]",
        "InstallLocation": "[variable('SolrInstallFolder')]"
      }
    },
    "Ensure host name exists": {
      "Type": "HostHeader",
      "Params": {
        "Hostname": "[parameter('SolrHost')]"
      }
    },
    "Export-Certificate": {
      "Type": "ScriptBlock",
      "Params": {
        "Script": "PARAM($CertStoreLocation,$Property,$Value,$PfxFile,$CertPassword) Get-ChildItem $CertStoreLocation | where $Property -eq $Value | Export-PfxCertificate -FilePath $PfxFile -Password (ConvertTo-SecureString -String $CertPassword -Force -AsPlainText) | Out-Null",
        "Arguments": [ "[parameter('CertStoreLocation')]", "[parameter('Property')]", "[parameter('Value')]", "[variable('CertStoreFile')]", "[parameter('CertPassword')]" ]
      }
    },
    "Rewrite Solr config file": {
      "Type": "ConfigureSolr",
      "Params": {
        "solrSSL": "[parameter('SolrUseSSL')]",
        "solrHost": "[parameter('SolrHost')]",
        "solrRoot": "[variable('SolrInstallFolder')]",
        "solrPort": "[parameter('SolrPort')]",
        "certificateStore": "[variable('CertStoreFile')]"
      }
    },
    "RunSolrAsService": {
      "Type": "SolrAsService",
      "Params": {
        "SolrPort": "[parameter('SolrPort')]",
        "SolrRoot": "[variable('SolrInstallFolder')]",
        "ServiceName" : "[parameter('SolrServiceName')]"
      }
    },
    "Ensure Solr is running": {
      "Type": "WebRequest",
      "Params": {
        "Uri": "[variable('SolrUrl')]",
        "RetryCount": "3",
        "RetryDelay": "5000",
        "RequestTimeout" :  "5000"
      }
    }
  }
}
